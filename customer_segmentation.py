# -*- coding: utf-8 -*-
"""customer segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EjoTscPe-T68acnOJNh6Le4_yEs-9Crl
"""

import pandas as pd
from datetime import datetime

df = pd.read_csv("data.csv", encoding='ISO-8859-1')
df.dropna(subset=['CustomerID'], inplace=True)
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']

# Recency Calculation
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
snapshot_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,
    'InvoiceNo': 'count',
    'TotalPrice': 'sum'
})
rfm.columns = ['Recency', 'Frequency', 'Monetary']

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm)

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=4, random_state=42)
rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)

import matplotlib.pyplot as plt

sse = []
for k in range(1, 10):
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(rfm_scaled)
    sse.append(km.inertia_)

plt.plot(range(1, 10), sse)
plt.xlabel("No of Clusters")
plt.ylabel("SSE")
plt.title("Elbow Method")
plt.show()

from sklearn.decomposition import PCA
import seaborn as sns
pca = PCA(n_components=2)
components = pca.fit_transform(rfm_scaled)
rfm['PCA1'] = components[:, 0]
rfm['PCA2'] = components[:, 1]

sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=rfm)

pip install streamlit

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

st.title("Customer Segmentation Dashboard")

rfm = pd.read_csv("rfm_with_clusters.csv")

cluster = st.selectbox("Choose Cluster to View", rfm['Cluster'].unique())
filtered = rfm[rfm['Cluster'] == cluster]
st.write(filtered.describe())

sns.pairplot(filtered[['Recency', 'Frequency', 'Monetary']])
st.pyplot()

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

st.title("Customer Segmentation using Clustering")

# Upload or load data
@st.cache_data
def load_data():
    df = pd.read_csv("data.csv", encoding='ISO-8859-1')
    df.dropna(subset=['CustomerID'], inplace=True)
    df['TotalPrice'] = df['Quantity'] * df['UnitPrice']
    df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
    return df

df = load_data()

# RFM Table
snapshot_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,
    'InvoiceNo': 'count',
    'TotalPrice': 'sum'
})
rfm.columns = ['Recency', 'Frequency', 'Monetary']

# Normalize
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm)

# Clustering
kmeans = KMeans(n_clusters=4, random_state=42)
rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)

# Visualization
st.subheader("RFM Scatterplot with Clusters")
fig, ax = plt.subplots()
sns.scatterplot(data=rfm, x='Recency', y='Monetary', hue='Cluster', palette='Set1', ax=ax)
st.pyplot(fig)

# Cluster Profiles
st.subheader("Cluster Summary")
st.write(rfm.groupby('Cluster').mean())

